/**
 * „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÁî®ÈùôÁöÑ„Éï„Ç°„Ç§„É´„Çµ„Éº„Éê„Éº
 * React SPA„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÈÖç‰ø°„Å®„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÊ©üËÉΩ„ÇíÊèê‰æõ
 */
import express from 'express';
import path from 'path';
import { existsSync } from 'fs';
import { fileURLToPath } from 'url';

const app = express();

// Áí∞Â¢ÉÂ§âÊï∞„Åã„ÇâË®≠ÂÆö„ÇíÂèñÂæó
const PORT = Number(process.env.PORT) || 3001;
// „Çµ„Éº„Éê„Éº„ÇíÂ§ñÈÉ®„Åã„Çâ„ÇÇÂà©Áî®„Åß„Åç„Çã„Çà„ÅÜ„ÄÅ„Éá„Éï„Ç©„É´„Éà„ÅØ 0.0.0.0 „Å´„Åô„Çã
const HOST = process.env.HOST || '0.0.0.0';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const DIST_PATH = path.join(__dirname, 'dist');

if (!existsSync(DIST_PATH)) {
  console.warn(`‚ö†Ô∏è  Frontend dist directory not found at: ${DIST_PATH}`);
  console.warn('    Did you run "npm run build"?');
}

// ÈùôÁöÑ„Éï„Ç°„Ç§„É´ÈÖç‰ø°Ë®≠ÂÆö
app.use(
  express.static(DIST_PATH, {
    index: ['index.html'],
    dotfiles: 'ignore',
    etag: false,
    lastModified: false,
    maxAge: 0, // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÁÑ°ÂäπÂåñ
  }),
);

// „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.get('/health', (_req, res) => {
  res.json({
    ok: true,
    service: 'frontend',
    timestamp: new Date().toISOString(),
    port: PORT,
    host: HOST,
    distPath: DIST_PATH,
    hasDist: existsSync(DIST_PATH),
    integrations: {
      github: false, // GitHub „Å™„Å©Â§ñÈÉ®„Çµ„Éº„Éì„Çπ„Å∏„Éá„Éº„ÇøÈÄÅ‰ø°„ÅØË°å„Å£„Å¶„ÅÑ„Å™„ÅÑ
    },
  });
});

// SPA„É´„Éº„ÉÜ„Ç£„É≥„Ç∞ÂØæÂøúÔºà„Åô„Åπ„Å¶„ÅÆ„É´„Éº„Éà„Çíindex.html„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
app.get('*', (_req, res, next) => {
  const indexFile = path.join(DIST_PATH, 'index.html');
  if (!existsSync(indexFile)) {
    return res.status(503).type('text/plain').send('Frontend build (index.html) is missing.');
  }

  res.sendFile(indexFile, (err) => {
    if (err) {
      next(err);
    }
  });
});

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
const server = app.listen(PORT, HOST, () => {
  console.log(`üåê Frontend server running on http://${HOST}:${PORT}`);
  console.log(`üìÅ Serving static files from: ${DIST_PATH}`);
});

// „Ç∞„É¨„Éº„Çπ„Éï„É´„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥
const shutdown = (signal) => {
  console.log(`üõë Received ${signal}. Shutting down frontend server...`);
  server.close(() => {
    console.log('‚úÖ Frontend server closed');
    process.exit(0);
  });
};

process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('unhandledRejection', (err) => {
  console.error('‚ùå Unhandled Rejection:', err);
  process.exit(1);
});

process.on('uncaughtException', (err) => {
  console.error('‚ùå Uncaught Exception:', err);
  process.exit(1);
});

export default app;

